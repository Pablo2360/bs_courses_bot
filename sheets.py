import gspread
from oauth2client.service_account import ServiceAccountCredentials
import threading
from time import time
from typing import List, Dict

# 1) –°–∫–æ—É–ø—ã –¥–æ—Å—Ç—É–ø–∞
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]

# 2) –ö—Ä–µ–¥—ã —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
CREDS = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", SCOPES)
CLIENT = gspread.authorize(CREDS)

# 3) ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = "1RP-8VTd4RTf92mR426MXznRw8f_-hWbrgyon6ar33-8"

# üóÑÔ∏è –ö—ç—à –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏: 
#     –∫–ª—é—á ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏), –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏–∑ —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
_CACHE: Dict[str, List[Dict]] = {}
_CACHE_LOCK = threading.Lock()
_CACHE_LOADED_AT: Dict[str, float] = {}
# TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö; –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –±—Ä–∞—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º
_CACHE_TTL = 3600  


def _find_worksheet_by_name(sh: gspread.Spreadsheet, category: str):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç (worksheet) –≤ –∫–Ω–∏–≥–µ sh, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    —Å category (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è). –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∫–∏–¥–∞–µ—Ç WorksheetNotFound.
    """
    lower_cat = category.strip().lower()
    for ws in sh.worksheets():
        if ws.title.strip().lower() == lower_cat:
            return ws
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ü–∏–∫–ª–∞ ‚Äî –ª–∏—Å—Ç–∞ –Ω–µ—Ç
    raise gspread.exceptions.WorksheetNotFound(f"–õ–∏—Å—Ç ¬´{category}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ")


def _load_sheet_cache(sheet_name: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤ –∫—ç—à –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –ª–∏—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º sheet_name (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ–≤–∞–∂–µ–Ω).
    """
    global _CACHE, _CACHE_LOADED_AT
    sh = CLIENT.open_by_key(SPREADSHEET_ID)
    try:
        worksheet = _find_worksheet_by_name(sh, sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        # –ï—Å–ª–∏ –ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º "–≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏"
        _CACHE[sheet_name] = []
        _CACHE_LOADED_AT[sheet_name] = time()
        return

    records = worksheet.get_all_records()
    _CACHE[sheet_name] = records
    _CACHE_LOADED_AT[sheet_name] = time()


def get_courses_by_category(category: str, offset: int = 0, limit: int = 10) -> List[Dict]:
    """
    –ë–µ—Ä—ë—Ç –ø–æ—Ä—Ü–∏—é –∫—É—Ä—Å–æ–≤ (limit —à—Ç—É–∫) –∏–∑ –ª–∏—Å—Ç–∞ <category>, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ offset.
    –ï—Å–ª–∏ –ª–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    (category —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ª–∏—Å—Ç–æ–≤ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    """
    sheet_name = category.strip()
    with _CACHE_LOCK:
        # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º
        if (sheet_name not in _CACHE) or (time() - _CACHE_LOADED_AT.get(sheet_name, 0) > _CACHE_TTL):
            _load_sheet_cache(sheet_name)

    data = _CACHE.get(sheet_name, [])
    return data[offset : offset + limit]


def count_courses_by_category(category: str) -> int:
    """
    –°—á–∏—Ç–∞–µ—Ç –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ <category> (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è).
    –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.
    """
    sheet_name = category.strip()
    with _CACHE_LOCK:
        if (sheet_name not in _CACHE) or (time() - _CACHE_LOADED_AT.get(sheet_name, 0) > _CACHE_TTL):
            _load_sheet_cache(sheet_name)

    data = _CACHE.get(sheet_name, [])
    return len(data)


def get_categories() -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ (–ª–∏—Å—Ç–æ–≤) –≤ —Ç–∞–±–ª–∏—Ü–µ.
    –ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏.
    """
    sh = CLIENT.open_by_key(SPREADSHEET_ID)
    return [ws.title for ws in sh.worksheets()]


def get_all_courses() -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ —Å—Ä–∞–∑—É –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫.
    –°–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è.
    """
    courses = []
    for sheet_name in get_categories():
        with _CACHE_LOCK:
            if (sheet_name not in _CACHE) or (time() - _CACHE_LOADED_AT.get(sheet_name, 0) > _CACHE_TTL):
                _load_sheet_cache(sheet_name)
        courses.extend(_CACHE.get(sheet_name, []))
    return courses
